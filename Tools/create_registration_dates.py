import json
from datetime import datetime
from math import ceil, floor

CHARACTERS = " ​‌‏ ⁪⁫⁬⁭⁮⁯"


def to_str(value):
    result = []
    while value > 0:
        result.insert(0, CHARACTERS[value % len(CHARACTERS)])
        value //= len(CHARACTERS)
    return ''.join(result)


def encode(source):
    try:
        bytes_data = source.encode('utf-8')
        plain_text = [to_str(byte) for byte in bytes_data]
        return "  " + ' '.join(plain_text)
    except Exception as e:
        print(e)
        return source


custom_dates = {
    139303278: 1444907760,
    1726613645: 1619872106,
    1804644428: 1626635495,
    1948531423: 1627123174,
    5033988623: 1641789741,
    5189042063: 1642871693,
    5249255238: 1646383782,
    5290311052: 1647451401,
    5887842880: 1672875600,
#     6730755882: 1715368740,  # self reg on May 10, 2024 at 22:19 MSK
    7163125139: 1713603600
}

toxi_dates = {
    "2768400": "01.11.2013",
    "7679610": "31.12.2013",
    "11538510": "31.01.2014",
    "15835240": "20.02.2014",
    "23646070": "26.02.2014",
    "38015510": "01.03.2014",
    "44634660": "06.04.2014",
    "46145300": "16.04.2014",
    "54845230": "21.06.2014",
    "63263510": "28.07.2014",
    "101260930": "06.03.2015",
    "101323190": "13.03.2015",
    "111220210": "21.04.2015",
    "103258380": "27.05.2015",
    "103151530": "04.06.2015",
    "116812040": "24.07.2015",
    "109393460": "09.08.2015",
    "112594710": "15.08.2015",
    "124872440": "18.08.2015",
    "130029930": "03.09.2015",
    "125828520": "05.10.2015",
    "133909600": "07.10.2015",
    "157242070": "08.11.2015",
    "143445120": "01.12.2015",
    "148670290": "08.01.2016",
    "152079340": "22.01.2016",
    "171295410": "09.03.2016",
    "181783990": "10.04.2016",
    "222021230": "08.06.2016",
    "225034350": "18.06.2016",
    "278941740": "10.09.2016",
    "285253070": "19.10.2016",
    "294851030": "20.11.2016",
    "297621220": "16.12.2016",
    "328594460": "29.12.2016",
    "337808420": "22.02.2017",
    "369669040": "30.03.2017",
    "400169470": "31.07.2017",
    "805158060": "15.07.2019",
    "1719891630": "02.04.2021",
    "1974255900": "12.10.2021",
    "6388231800": "11.10.2023",
    "6792374320": "09.11.2023",
    "6807843090": "19.12.2023",
    "6855200700": "07.01.2024"
}

for (user_id, registration_date) in toxi_dates.items():
    custom_dates[int(user_id)] = int(datetime.strptime(registration_date, "%d.%m.%Y").timestamp())

# https://github.com/kukuruzka165/materialgram/blob/2dc7a10cd330c5d216e1567799cfcf8db4cd302b/Telegram/SourceFiles/info/profile/info_profile_values.cpp#L100
s = '''
{1000000, 1380326400}, // 2013
{2768409, 1383264000},
{7679610, 1388448000},
{11538514, 1391212000}, // 2014
{15835244, 1392940000},
{23646077, 1393459000},
{38015510, 1393632000},
{44634663, 1399334000},
{46145305, 1400198000},
{54845238, 1411257000},
{63263518, 1414454000},
{101260938, 1425600000}, // 2015
{101323197, 1426204000},
{103151531, 1433376000},
{103258382, 1432771000},
{109393468, 1439078000},
{111220210, 1429574000},
{112594714, 1439683000},
{116812045, 1437696000},
{122600695, 1437782000},
{124872445, 1439856000},
{125828524, 1444003000},
{130029930, 1441324000},
{133909606, 1444176000},
{143445125, 1448928000},
{148670295, 1452211000}, // 2016
{152079341, 1453420000},
{157242073, 1446768000},
{171295414, 1457481000},
{181783990, 1460246000},
{222021233, 1465344000},
{225034354, 1466208000},
{278941742, 1473465000},
{285253072, 1476835000},
{294851037, 1479600000},
{297621225, 1481846000},
{328594461, 1482969000},
{337808429, 1487707000}, // 2017
{341546272, 1487782000},
{352940995, 1487894000},
{369669043, 1490918000},
{400169472, 1501459000},
{616816630, 1529625600}, // 2018
{681896077, 1532821500},
{727572658, 1543708800},
{796147074, 1541371800},
{925078064, 1563290000}, // 2019
{928636984, 1581513420}, // 2020
{1054883348, 1585674420},
{1057704545, 1580393640},
{1145856008, 1586342040},
{1227964864, 1596127860},
{1382531194, 1600188120},
{1658586909, 1613148540}, // 2021
{1660971491, 1613329440},
{1692464211, 1615402500},
{1719536397, 1619293500},
{1721844091, 1620224820},
{1772991138, 1617540360},
{1807942741, 1625520300},
{1893429550, 1622040000},
{1972424006, 1631669400},
{1974255900, 1634000000},
{2030606431, 1631992680},
{2041327411, 1631989620},
{2078711279, 1634321820},
{2104178931, 1638353220},
{2120496865, 1636714020},
{2123596685, 1636503180},
{2138472342, 1637590800},
{3318845111, 1618028800},
{4317845111, 1620028800},
{5162494923, 1652449800}, // 2022
{5186883095, 1648764360},
{5304951856, 1656718440},
{5317829834, 1653152820},
{5318092331, 1652024220},
{5336336790, 1646368100},
{5362593868, 1652024520},
{5387234031, 1662137700},
{5396587273, 1648014800},
{5409444610, 1659025020},
{5416026704, 1660925460},
{5465223076, 1661710860},
{5480654757, 1660926300},
{5499934702, 1662130740},
{5513192189, 1659626400},
{5522237606, 1654167240},
{5537251684, 1664269800},
{5559167331, 1656718560},
{5568348673, 1654642200},
{5591759222, 1659025500},
{5608562550, 1664012820},
{5614111200, 1661780160},
{5666819340, 1664112240},
{5684254605, 1662134040},
{5684689868, 1661304720},
{5707112959, 1663803300},
{5756095415, 1660925940},
{5772670706, 1661539140},
{5778063231, 1667477640},
{5802242180, 1671821040},
{5853442730, 1674866100}, // 2023
{5859878513, 1673117760},
{5885964106, 1671081840},
{5982648124, 1686941700},
{6020888206, 1675534800},
{6032606998, 1686998640},
{6057123350, 1676198350},
{6058560984, 1686907980},
{6101607245, 1686830760},
{6108011341, 1681032060},
{6132325730, 1692033840},
{6182056052, 1687870740},
{6279839148, 1688399160},
{6306077724, 1692442920},
{6321562426, 1688486760},
{6364973680, 1696349340},
{6386727079, 1691696880},
{6429580803, 1692082680},
{6527226055, 1690289160},
{6813121418, 1698489600},
{6865576492, 1699052400},
{6925870357, 1701192327},
'''

res = []
for line in s.split('\n'):
    line = line.strip('\r\t\n ,/0123456789')
    if not line:
        continue

    line = line.strip('{}')
    if not line:
        continue

    user_id, registration_date = map(int, line.split(', '))
    res.append((user_id, registration_date, 1))

# кастомные даты с большими весами, потому что хуй знает откуда
# автор материалграма брал даты
res.extend([(k, v, 2) for k, v in custom_dates.items()])
res.sort(key=lambda x: x[0])

print("preprocess")
print(len(res))
print(res)


# def merge_tuples(tuples):
#     sorted_tuples = sorted(tuples, key=lambda x: (x[0], x[1]))
#     merged_tuples = []
#
#     i = 0
#     while i < len(sorted_tuples):
#         j = i + 1
#         while j < len(sorted_tuples) and (
#                 sorted_tuples[j][0] < sorted_tuples[i][0] or sorted_tuples[j][1] < sorted_tuples[i][1]):
#             j += 1
#         if j > i + 1:
#             x_avg = sum(x[0] for x in sorted_tuples[i:j]) / (j - i)
#             y_avg = sum(x[1] for x in sorted_tuples[i:j]) / (j - i)
#             x_avg = ceil(x_avg) if x_avg - int(x_avg) >= 0.5 else floor(x_avg)
#             y_avg = ceil(y_avg) if y_avg - int(y_avg) >= 0.5 else floor(y_avg)
#             sorted_tuples[i] = (int(x_avg), int(y_avg))
#         merged_tuples.append(sorted_tuples[i])
#         i = j
#
#     return merged_tuples
def merge_tuples(tuples):
    sorted_tuples = sorted(tuples, key=lambda x: (x[0], x[1], x[2]))
    merged_tuples = []

    i = 0
    while i < len(sorted_tuples):
        j = i + 1
        while j < len(sorted_tuples) and (
                sorted_tuples[j][0] < sorted_tuples[i][0] or sorted_tuples[j][1] < sorted_tuples[i][1]):
            j += 1
        if j > i + 1:
            total_weight = sum(x[2] for x in sorted_tuples[i:j])
            x_avg = sum(x[0] * x[2] for x in sorted_tuples[i:j]) / total_weight
            y_avg = sum(x[1] * x[2] for x in sorted_tuples[i:j]) / total_weight
            x_avg = ceil(x_avg) if x_avg - int(x_avg) >= 0.5 else floor(x_avg)
            y_avg = ceil(y_avg) if y_avg - int(y_avg) >= 0.5 else floor(y_avg)
            sorted_tuples[i] = (int(x_avg), int(y_avg))
        merged_tuples.append((sorted_tuples[i][0], sorted_tuples[i][1]))
        i = j

    return merged_tuples


res = merge_tuples(res)
print("afterprocess")
print(len(res))
print(res)

d = dict()
for user_id, registration_date in res:
    d[user_id] = registration_date

text = json.dumps(d)
# print(text)

with open('registration_dates.bin', 'wb') as f:
    f.write(encode(text).encode())
